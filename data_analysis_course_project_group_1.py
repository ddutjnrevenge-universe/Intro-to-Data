# -*- coding: utf-8 -*-
"""Data Analysis Course Project_Group 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iK25gbaRuGycjTT7ouEefYBPZefzlaNG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""#**Import Data**"""

score_20 = pd.read_csv("/content/diemthi2020.csv")
score_21 = pd.read_csv("/content/diemthi2021.csv")
score_22 = pd.read_csv("/content/diemthi2022.csv")

"""#**Code Mới**

##**2. Điểm Tự nhiên khó lấy điểm cao hơn điểm Xã hội** (confidence interval and histogram)
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from statsmodels.stats.diagnostic import het_breuschpagan
from statsmodels.stats.stattools import durbin_watson
from scipy.stats import shapiro
from sklearn.model_selection import GridSearchCV
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

sci_features_20 = score_20[['Biological','Physics','Chemistry','Math','Foreign Language','Literature','GPA of Natural Science']]
sci_features_20.dropna(inplace = True)
# print(sci_features_20.isna().sum(),sci_features_20)
soc_features_20 = score_20[['Civic Education','Geography','History','Math','Foreign Language','Literature','GPA of Natural Social']]
soc_features_20.dropna(inplace = True)
# print(soc_features_20.isna().sum(),soc_features_20)
sci_features_21 = score_21[['Biological','Physics','Chemistry','Math','Foreign Language','Literature','GPA of Natural Science']]
sci_features_21.dropna(inplace = True)
# print(sci_features_21.isna().sum(),sci_features_21)
soc_features_21 = score_21[['Civic Education','Geography','History','Math','Foreign Language','Literature','GPA of Natural Social']]
soc_features_21.dropna(inplace = True)
# print(soc_features_21.isna().sum(),soc_features_21)
sci_features_22 = score_22[['Biological','Physical','Chemistry','Math','Foreign Language','Literature','GPA of Natural Science']]
sci_features_22.dropna(inplace = True)
# print(sci_features_22.isna().sum(),sci_features_22)
soc_features_22 = score_22[['Civic education','GeographyCivic education','History','Math','Foreign Language','Literature','GPA of Social Science']]
soc_features_22.dropna(inplace = True)
# print(soc_features_22.isna().sum(),soc_features_22)

"""###**Confidence Interval**"""

import math

def calculate_confidence_interval(sample_mean, population_std_dev, population, confidence_level=0.95):
    # Assuming large sample sizes, n is approximately equal to the population size
    n = population
    # Using z-distribution critical value for the desired confidence level
    z_critical = 1.96  # For 95% confidence level (can change for different confidence levels)
    # Calculating standard error
    standard_error = population_std_dev / math.sqrt(n)
    # Calculating lower and upper bounds of the confidence interval
    lower_bound = sample_mean - (z_critical * standard_error)
    upper_bound = sample_mean + (z_critical * standard_error)
    return (lower_bound, upper_bound)

data = {
    2020: {
        'NS_mean': score_20['GPA of Natural Science'].mean(),
        'NS_standard deviation':  score_20['GPA of Natural Science'].std(),
        'NS_variance':  score_20['GPA of Natural Science'].var(),
        'NS_population':  score_20['GPA of Natural Science'].count(),
        'SS_mean': score_20['GPA of Natural Social'].mean(),
        'SS_standard deviation': score_20['GPA of Natural Social'].std(),
        'SS_variance': score_20['GPA of Natural Social'].var(),
        'SS_population': score_20['GPA of Natural Social'].count()
    },
    2021: {
        'NS_mean': score_21['GPA of Natural Science'].mean(),
        'NS_standard deviation':  score_21['GPA of Natural Science'].std(),
        'NS_variance':  score_21['GPA of Natural Science'].var(),
        'NS_population':  score_21['GPA of Natural Science'].count(),
        'SS_mean': score_21['GPA of Natural Social'].mean(),
        'SS_standard deviation': score_21['GPA of Natural Social'].std(),
        'SS_variance': score_21['GPA of Natural Social'].var(),
        'SS_population': score_21['GPA of Natural Social'].count()
    },
    2022: {
        'NS_mean': score_22['GPA of Natural Science'].mean(),
        'NS_standard deviation':  score_22['GPA of Natural Science'].std(),
        'NS_variance':  score_22['GPA of Natural Science'].var(),
        'NS_population':  score_22['GPA of Natural Science'].count(),
        'SS_mean': score_22['GPA of Social Science'].mean(),
        'SS_standard deviation': score_22['GPA of Social Science'].std(),
        'SS_variance': score_22['GPA of Social Science'].var(),
        'SS_population': score_22['GPA of Social Science'].count()
    }
}
# Calculate confidence intervals for GPA of Natural Sciences and Social Sciences for each year
for year, values in data.items():
    NS_lower, NS_upper = calculate_confidence_interval(values['NS_mean'], values['NS_standard deviation'], values['NS_population'])
    SS_lower, SS_upper = calculate_confidence_interval(values['SS_mean'], values['SS_standard deviation'], values['SS_population'])

    print(f"Year {year} - GPA of Natural Sciences: {NS_lower:.3f} to {NS_upper:.3f}")
    print(f"Year {year} - GPA of Social Sciences: {SS_lower:.3f} to {SS_upper:.3f}")

"""###**2 sample variance hypothesis test**"""

import numpy as np
from scipy.stats import f

def two_sample_variance_test(sample1, sample2, alpha=0.05):
    # Calculate the sample variances
    variance1 = np.var(sample1, ddof=1)  # Set ddof=1 for sample variance (N-1)
    variance2 = np.var(sample2, ddof=1)

    # Calculate the F-statistic
    F_statistic = variance1 / variance2 if variance1 >= variance2 else variance2 / variance1

    # Calculate the degrees of freedom
    df1 = len(sample1) - 1
    df2 = len(sample2) - 1

    # Calculate the critical F-value
    critical_F = f.ppf(1 - alpha / 2, df1, df2)

    # Compare the F-statistic with the critical F-value to make a decision on the null hypothesis
    if F_statistic > critical_F:
        # Reject the null hypothesis (Ha: Variances are different)
        return "Reject null hypothesis: \nThere is evidence to suggest that the population variance in scores of Natural Science is greater than the population variance in scores of Social Science."
    else:
        # Fail to reject the null hypothesis (H0: Variances are equal)
        return "Fail to reject null hypothesis: \nThere is no evidence to suggest that the population variance in scores of Natural Science is greater than the population variance in scores of Social Science."

# Example usage for each year's data
sample1_2020 = score_20['GPA of Natural Science'].dropna()
sample2_2020 = score_20['GPA of Natural Social'].dropna()


result_2020 = two_sample_variance_test(sample1_2020, sample2_2020)
print("2020:", result_2020)

sample1_2021 = score_21['GPA of Natural Science'].dropna()
sample2_2021 = score_21['GPA of Natural Social'].dropna()

result_2021 = two_sample_variance_test(sample1_2021, sample2_2021)
print("2021:", result_2021)

sample_data_2022 = score_22[['GPA of Natural Science', 'GPA of Social Science']].dropna()
sample1_2022 = score_22['GPA of Natural Science'].dropna()
sample2_2022 = score_22['GPA of Social Science'].dropna()

result_2022 = two_sample_variance_test(sample1_2022, sample2_2022)
print("2022:", result_2022)

"""###**Histogram**

####**2020**
"""

def plot_combined_histograms(score_natural, score_social):
    sns.histplot(x=score_social, data=soc_features_20, kde=True, element="step", stat="density", color='green')

    # Natural Science Histogram
    sns.histplot(x=score_natural, data=sci_features_20, kde=True, element="step", stat="density", color='blue')

    # Social Science Histogram

    plt.suptitle("GPA of Natural Science vs. GPA of Natural Social", fontsize=18)
    plt.legend()
    plt.show()

plot_combined_histograms('GPA of Natural Science', 'GPA of Natural Social')

import matplotlib.pyplot as plt
import seaborn as sns

def plot_combined(score1, score2, data1, data2, color1, color2):
    fig, axes = plt.subplots(1, 2, figsize=(18, 6), dpi=100)

    # Plot histogram for Natural Science
    sns.histplot(x=score1, data=data1, kde=True, element="step", stat="density", color=color1, ax=axes[0])
    axes[0].set_title(f"Skewness: {data1[score1].skew()}  \n Kurtosis: {data1[score1].kurt()}", fontsize=14)

    # Plot histogram for Social Science
    sns.histplot(x=score2, data=data2, kde=True, element="step", stat="density", color=color2, ax=axes[1])
    axes[1].set_title(f"Skewness: {data2[score2].skew()}  \n Kurtosis: {data2[score2].kurt()}", fontsize=14)

    plt.suptitle(f"2020 - Histograms: {score1} vs {score2}", fontsize=18)
    fig.tight_layout()
    plt.show()

def plot_boxplot_combined(score1, score2, data1, data2, color1, color2):
    fig, axes = plt.subplots(1, 2, figsize=(18, 6), dpi=100)

    # Plot boxplot for Natural Science
    sns.boxplot(x=score1, data=data1, ax=axes[0], color=color1)
    axes[0].set_title(f"Boxplot: {score1}", fontsize=14)

    # Plot boxplot for Social Science
    sns.boxplot(x=score2, data=data2, ax=axes[1], color=color2)
    axes[1].set_title(f"Boxplot: {score2}", fontsize=14)

    plt.suptitle(f"Boxplot Comparison: {score1} vs {score2}", fontsize=18)
    fig.tight_layout()
    plt.show()

# Assuming you have the dataframes sci_features_20 and soc_features_20 for each score
score1 = 'GPA of Natural Science'
score2 = 'GPA of Natural Social'
color1 = 'blue'
color2 = 'green'

plot_combined(score1, score2, sci_features_20, soc_features_20, color1, color2)
plot_boxplot_combined(score1, score2, sci_features_20, soc_features_20, color1, color2)

def plot(score):
    fig, ax = plt.subplots(1, 2,figsize=(18,6), dpi=100)
    sns.histplot(x=score, data=sci_features_20, kde=True, element="step", stat="density",color = 'blue', ax=ax[0])

    sns.boxplot(x=score, data=sci_features_20,  ax=ax[1])
    ax[0].set_title(f"Skewness: {sci_features_20[score].skew()}  \n Kurtosis: {sci_features_20[score].kurt()}", fontsize=14, )
    plt.suptitle(score, fontsize=18)
    fig.tight_layout()
    plt.show()

plot('GPA of Natural Science')

def plot(score):
    fig, ax = plt.subplots(1, 2,figsize=(18,6), dpi=100)
    sns.histplot(x=score, data=soc_features_20, kde=True, element="step", stat="density",color = 'green', ax=ax[0])

    sns.boxplot(x=score, data=soc_features_20,  ax=ax[1], color='g')
    ax[0].set_title(f"Skewness: {soc_features_20[score].skew()}  \n Kurtosis: {soc_features_20[score].kurt()}", fontsize=14, )

    plt.suptitle(score, fontsize=18)
    fig.tight_layout()
    plt.show()
plot('GPA of Natural Social')

"""####**2021**"""

def plot_combined(score1, score2, data1, data2, color1, color2):
    fig, axes = plt.subplots(1, 2, figsize=(18, 6), dpi=100)

    # Plot histogram for Natural Science
    sns.histplot(x=score1, data=data1, kde=True, element="step", stat="density", color=color1, ax=axes[0])
    axes[0].set_title(f"Skewness: {data1[score1].skew()}  \n Kurtosis: {data1[score1].kurt()}", fontsize=14)

    # Plot histogram for Social Science
    sns.histplot(x=score2, data=data2, kde=True, element="step", stat="density", color=color2, ax=axes[1])
    axes[1].set_title(f"Skewness: {data2[score2].skew()}  \n Kurtosis: {data2[score2].kurt()}", fontsize=14)

    plt.suptitle(f"2021 - Histograms: {score1} vs {score2}", fontsize=18)
    fig.tight_layout()
    plt.show()

def plot_boxplot_combined(score1, score2, data1, data2, color1, color2):
    fig, axes = plt.subplots(1, 2, figsize=(18, 6), dpi=100)

    # Plot boxplot for Natural Science
    sns.boxplot(x=score1, data=data1, ax=axes[0], color=color1)
    axes[0].set_title(f"Boxplot: {score1}", fontsize=14)

    # Plot boxplot for Social Science
    sns.boxplot(x=score2, data=data2, ax=axes[1], color=color2)
    axes[1].set_title(f"Boxplot: {score2}", fontsize=14)

    plt.suptitle(f"Boxplot Comparison: {score1} vs {score2}", fontsize=18)
    fig.tight_layout()
    plt.show()

# Assuming you have the dataframes sci_features_20 and soc_features_20 for each score
score1 = 'GPA of Natural Science'
score2 = 'GPA of Natural Social'
color1 = 'blue'
color2 = 'green'

plot_combined(score1, score2, sci_features_21, soc_features_21, color1, color2)
plot_boxplot_combined(score1, score2, sci_features_21, soc_features_21, color1, color2)

def plot(score):
    fig, ax = plt.subplots(1, 2,figsize=(18,6), dpi=100)
    sns.histplot(x=score, data=sci_features_21, kde=True, element="step", stat="density",color = 'blue', ax=ax[0])

    sns.boxplot(x=score, data=sci_features_21,  ax=ax[1])
    ax[0].set_title(f"Skewness: {sci_features_21[score].skew()}  \n Kurtosis: {sci_features_21[score].kurt()}", fontsize=14, )
    plt.suptitle(score, fontsize=18)
    fig.tight_layout()
    plt.show()

plot('GPA of Natural Science')

def plot(score):
    fig, ax = plt.subplots(1, 2,figsize=(18,6), dpi=100)
    sns.histplot(x=score, data=soc_features_21, kde=True, element="step", stat="density",color = 'green', ax=ax[0])

    sns.boxplot(x=score, data=soc_features_21,  ax=ax[1], color='g')
    ax[0].set_title(f"Skewness: {soc_features_21[score].skew()}  \n Kurtosis: {soc_features_21[score].kurt()}", fontsize=14, )

    plt.suptitle(score, fontsize=18)
    fig.tight_layout()
    plt.show()
plot('GPA of Natural Social')

"""####**2022**"""

import matplotlib.pyplot as plt
import seaborn as sns

def plot_combined(score1, score2, data1, data2, color1, color2):
    fig, axes = plt.subplots(1, 2, figsize=(18, 6), dpi=100)

    # Plot histogram for Natural Science
    sns.histplot(x=score1, data=data1, kde=True, element="step", stat="density", color=color1, ax=axes[0])
    axes[0].set_title(f"Skewness: {data1[score1].skew()}  \n Kurtosis: {data1[score1].kurt()}", fontsize=14)

    # Plot histogram for Social Science
    sns.histplot(x=score2, data=data2, kde=True, element="step", stat="density", color=color2, ax=axes[1])
    axes[1].set_title(f"Skewness: {data2[score2].skew()}  \n Kurtosis: {data2[score2].kurt()}", fontsize=14)

    plt.suptitle(f"2022 - Histograms: {score1} vs {score2}", fontsize=18)
    fig.tight_layout()
    plt.show()

def plot_boxplot_combined(score1, score2, data1, data2, color1, color2):
    fig, axes = plt.subplots(1, 2, figsize=(18, 6), dpi=100)

    # Plot boxplot for Natural Science
    sns.boxplot(x=score1, data=data1, ax=axes[0], color=color1)
    axes[0].set_title(f"Boxplot: {score1}", fontsize=14)

    # Plot boxplot for Social Science
    sns.boxplot(x=score2, data=data2, ax=axes[1], color=color2)
    axes[1].set_title(f"Boxplot: {score2}", fontsize=14)

    plt.suptitle(f"Boxplot Comparison: {score1} vs {score2}", fontsize=18)
    fig.tight_layout()
    plt.show()

# Assuming you have the dataframes sci_features_20 and soc_features_20 for each score
score1 = 'GPA of Natural Science'
score2 = 'GPA of Social Science'
color1 = 'blue'
color2 = 'green'

plot_combined(score1, score2, sci_features_22, soc_features_22, color1, color2)
plot_boxplot_combined(score1, score2, sci_features_22, soc_features_22, color1, color2)

def plot(score):
    fig, ax = plt.subplots(1, 2,figsize=(18,6), dpi=100)
    sns.histplot(x=score, data=sci_features_22, kde=True, element="step", stat="density",color = 'blue', ax=ax[0])

    sns.boxplot(x=score, data=sci_features_22,  ax=ax[1])
    ax[0].set_title(f"Skewness: {sci_features_22[score].skew()}  \n Kurtosis: {sci_features_22[score].kurt()}", fontsize=14, )
    plt.suptitle(score, fontsize=18)
    fig.tight_layout()
    plt.show()

plot('GPA of Natural Science')

def plot(score):
    fig, ax = plt.subplots(1, 2,figsize=(18,6), dpi=100)
    sns.histplot(x=score, data=soc_features_22, kde=True, element="step", stat="density",color = 'green', ax=ax[0])

    sns.boxplot(x=score, data=soc_features_22,  ax=ax[1], color='g')
    ax[0].set_title(f"Skewness: {soc_features_22[score].skew()}  \n Kurtosis: {soc_features_22[score].kurt()}", fontsize=14, )

    plt.suptitle(score, fontsize=18)
    fig.tight_layout()
    plt.show()
plot('GPA of Social Science')

"""##**3. Tự nhiên dễ bị điểm liệt hơn Xã hội**?

###**Two sample proportion hypothesis test**

####**2020**
"""

natural_science_subjects = ['Biological', 'Physics', 'Chemistry']
ns_20 = score_20[score_20['GPA of Natural Science'].notnull()].ID.count()
para_ns_20 = score_20[
    score_20['GPA of Natural Science'].notnull() &
    (score_20[natural_science_subjects].max(axis=1) <= 1)
]

# Sorting out score_20 for Social Science combination
social_science_subjects = ['Civic Education', 'Geography', 'History']
ss_20 = score_20[score_20['GPA of Natural Social'].notnull()].ID.count()
para_ss_20 = score_20[
    score_20['GPA of Natural Social'].notnull() &
    (score_20[social_science_subjects].max(axis=1) <= 1)
]
print('Total number of students who take Natural Science combination for national high school exam:',ns_20)
print("List of students with paralysis point in Natural Science year 2020:",para_ns_20.ID.count())
# print(para_ns_20)
print('Total number of students who take Social Science combination for national high school exam:',ss_20)
print("List of students with paralysis point in Natural Science year 2020:",para_ss_20.ID.count())
# if para_ss_20.ID.count()>0:
#   print(para_ss_20)

def two_sample_proportions_test(successes1, sample_size1, successes2, sample_size2, confidence_level=0.95):
    # Check non-skewness criterion
    if sample_size1 < 10 or sample_size2 < 10:
        raise ValueError("Both sample sizes should be at least 10 for the normal approximation to be valid.")
    # Calculate the sample proportions
    p1 = successes1 / sample_size1
    p2 = successes2 / sample_size2

    # Calculate the pooled sample proportion
    p_pool = (successes1 + successes2) / (sample_size1 + sample_size2)

    # Calculate the standard error for the difference
    SE_diff = math.sqrt(p_pool * (1 - p_pool) * ((1 / sample_size1) + (1 / sample_size2)))

    # Calculate the Z-statistic
    Z = round((p1 - p2) / SE_diff,4)
    print('The value of test statistic Z =', Z)

    # Determine the critical Z-value based on the confidence level
    # For a 95% confidence level, the critical Z-value is approximately 1.96
    critical_Z = 1.96

    # Find p-value
    p_value = round(scipy.stats.norm.sf(Z),4)
    print('p-value:', p_value)

    # Make a decision on the null hypothesis
    if Z > critical_Z:
        # Reject the null hypothesis (Ha: p1 > p2)
        decision = "Reject null hypothesis.\nThere is evidence to suggest that the true proportion of students with paralysis point in Natural Science is greater than the true proportion of students with paralysis point in Social Science."
    else:
        # Fail to reject the null hypothesis (H0: p1 = p2)
        decision = "Fail to reject null hypothesis.\nThere is no evidence to suggest that the true proportion of students with paralysis point in Natural Science is greater than the true proportion of students with paralysis point in Social Science."

    # Create Z-distribution plot
    x = np.linspace(-4, 4, 1000)  # Values for the Z-distribution from -4 to 4 (adjust if needed)
    y = scipy.stats.norm.pdf(x, loc=0, scale=1)  # Probability Density Function (PDF) of Z-distribution

    fig, ax = plt.subplots()
    ax.plot(x, y, color='blue', label='Z-distribution (N(0, 1))')

    # Highlight the area corresponding to the p-value (shaded region)
    x_fill = np.linspace(Z, 4, 1000)  # Values from Z-score to the right tail
    y_fill = scipy.stats.norm.pdf(x_fill, loc=0, scale=1)
    ax.fill_between(x_fill, y_fill, color='blue', alpha=0.3, label='p-value Area')

    # Set labels and title
    ax.set_xlabel('Z-score')
    ax.set_ylabel('Probability Density')
    ax.set_title('Z-distribution with p-value Area')



    # Add vertical lines representing the Z-score
    ax.axvline(Z, color='green', linestyle='--', label='Z-score')

    # Add legend
    ax.legend()

    plt.show()

    return decision

result = two_sample_proportions_test(para_ns_20.ID.count(), ns_20, para_ss_20.ID.count(), ss_20)
print(result)

"""####**2021**"""

natural_science_subjects = ['Biological', 'Physics', 'Chemistry']
ns_21 = score_21[score_21['GPA of Natural Science'].notnull()].ID.count()
para_ns_21 = score_21[
    score_21['GPA of Natural Science'].notnull() &
    (score_21[natural_science_subjects].max(axis=1) <= 1)
]

# Sorting out score_21 for Social Science combination
social_science_subjects = ['Civic Education', 'Geography', 'History']
ss_21 = score_21[score_21['GPA of Natural Social'].notnull()].ID.count()
para_ss_21 = score_21[
    score_21['GPA of Natural Social'].notnull() &
    (score_21[social_science_subjects].max(axis=1) <= 1)
]
print('Total number of students who take Natural Science combination for national high school exam:',ns_21)
print("List of students with paralysis point in Natural Science year 2021:",para_ns_21.ID.count())
# print(para_ns_21)
print('Total number of students who take Social Science combination for national high school exam:',ss_21)
print("List of students with paralysis point in Natural Science year 2021:",para_ss_21.ID.count())
# if para_ss_21.ID.count()>0:
#   print(para_ss_21)

def two_sample_proportions_test(successes1, sample_size1, successes2, sample_size2, confidence_level=0.95):
    # Check non-skewness criterion
    if sample_size1 < 10 or sample_size2 < 10:
        raise ValueError("Both sample sizes should be at least 10 for the normal approximation to be valid.")
    # Calculate the sample proportions
    p1 = successes1 / sample_size1
    p2 = successes2 / sample_size2

    # Calculate the pooled sample proportion
    p_pool = (successes1 + successes2) / (sample_size1 + sample_size2)

    # Calculate the standard error for the difference
    SE_diff = math.sqrt(p_pool * (1 - p_pool) * ((1 / sample_size1) + (1 / sample_size2)))

    # Calculate the Z-statistic
    Z= round((p1 - p2) / SE_diff,4)
    print('The value of test statistic Z=', Z)

    # Determine the critical Z-value based on the confidence level
    # For a 95% confidence level, the critical Z-value is approximately 1.96
    critical_Z = 1.96

    # Find p-value
    p_value = round(scipy.stats.norm.sf(Z),4)
    print('p-value:', p_value)

    # Make a decision on the null hypothesis
    if Z > critical_Z:
        # Reject the null hypothesis (Ha: p1 > p2)
        decision = "Reject null hypothesis.\nThere is evidence to suggest that the true proportion of students with paralysis point in Natural Science is greater than the true proportion of students with paralysis point in Social Science."
    else:
        # Fail to reject the null hypothesis (H0: p1 = p2)
        decision = "Fail to reject null hypothesis.\nThere is no evidence to suggest that the true proportion of students with paralysis point in Natural Science is greater than the true proportion of students with paralysis point in Social Science."

    # Create Z-distribution plot
    x = np.linspace(-4, 4, 1000)  # Values for the Z-distribution from -4 to 4 (adjust if needed)
    y = scipy.stats.norm.pdf(x, loc=0, scale=1)  # Probability Density Function (PDF) of Z-distribution

    fig, ax = plt.subplots()
    ax.plot(x, y, color='blue', label='Z-distribution (N(0, 1))')

    # Highlight the area corresponding to the p-value (shaded region)
    x_fill = np.linspace(Z, 4, 1000)  # Values from Z-score to the right tail
    y_fill = scipy.stats.norm.pdf(x_fill, loc=0, scale=1)
    ax.fill_between(x_fill, y_fill, color='blue', alpha=0.3, label='p-value Area')

    # Set labels and title
    ax.set_xlabel('Z-score')
    ax.set_ylabel('Probability Density')
    ax.set_title('Z-distribution with p-value Area')



    # Add vertical lines representing the Z-score
    ax.axvline(Z, color='green', linestyle='--', label='Z-score')

    # Add legend
    ax.legend()

    plt.show()

    return decision

result = two_sample_proportions_test(para_ns_21.ID.count(),ns_21,para_ss_21.ID.count(),ss_21)
print(result)

"""####**2022**"""

natural_science_subjects = ['Biological', 'Physical', 'Chemistry']
ns_22 = score_22[score_22['GPA of Natural Science'].notnull()].ID.count()
para_ns_22 = score_22[
    score_22['GPA of Natural Science'].notnull() &
    (score_22[natural_science_subjects].max(axis=1) <= 1)
]

# Sorting out score_22 for Social Science combination
social_science_subjects = ['Civic education', 'GeographyCivic education', 'History']
ss_22 = score_22[score_22['GPA of Social Science'].notnull()].ID.count()
para_ss_22 = score_22[
    score_22['GPA of Social Science'].notnull() &
    (score_22[social_science_subjects].max(axis=1) <= 1)
]
print('Total number of students who take Natural Science combination for national high school exam:',ns_22)
print("List of students with paralysis point in Natural Science year 2022:",para_ns_22.ID.count())
# print(para_ns_22)
print('Total number of students who take Social Science combination for national high school exam:',ss_22)
print("List of students with paralysis point in Social Science year 2022:",para_ss_22.ID.count())
# if para_ss_22.ID.count()>0:
#   print(para_ss_22)

def two_sample_proportions_test(successes1, sample_size1, successes2, sample_size2, confidence_level=0.95):
    # Check non-skewness criterion
    if sample_size1 < 10 or sample_size2 < 10:
        raise ValueError("Both sample sizes should be at least 10 for the normal approximation to be valid.")
    # Calculate the sample proportions
    p1 = successes1 / sample_size1
    p2 = successes2 / sample_size2

    # Calculate the pooled sample proportion
    p_pool = (successes1 + successes2) / (sample_size1 + sample_size2)

    # Calculate the standard error for the difference
    SE_diff = math.sqrt(p_pool * (1 - p_pool) * ((1 / sample_size1) + (1 / sample_size2)))

    # Calculate the Z-statistic
    Z= round((p1 - p2) / SE_diff,4)
    print('The value of test statistic Z =', Z)

    # Determine the critical Z-value based on the confidence level
    # For a 95% confidence level, the critical Z-value is approximately 1.96
    critical_Z = 1.96

    # Find p-value
    p_value = round(scipy.stats.norm.sf(Z),4)
    print('p-value:', p_value)

    # Make a decision on the null hypothesis
    if Z > critical_Z:
        # Reject the null hypothesis (Ha: p1 > p2)
        decision = "Reject null hypothesis.\nThere is evidence to suggest that the true proportion of students with paralysis point in Natural Science is greater than the true proportion of students with paralysis point in Social Science."
    else:
        # Fail to reject the null hypothesis (H0: p1 = p2)
        decision = "Fail to reject null hypothesis.\nThere is no evidence to suggest that the true proportion of students with paralysis point in Natural Science is greater than the true proportion of students with paralysis point in Social Science."

    # Create Z-distribution plot
    x = np.linspace(-4, 4, 1000)  # Values for the Z-distribution from -4 to 4 (adjust if needed)
    y = scipy.stats.norm.pdf(x, loc=0, scale=1)  # Probability Density Function (PDF) of Z-distribution

    fig, ax = plt.subplots()
    ax.plot(x, y, color='blue', label='Z-distribution (N(0, 1))')

    # Highlight the area corresponding to the p-value (shaded region)
    x_fill = np.linspace(Z, 4, 1000)  # Values from Z-score to the right tail
    y_fill = scipy.stats.norm.pdf(x_fill, loc=0, scale=1)
    ax.fill_between(x_fill, y_fill, color='blue', alpha=0.3, label='p-value Area')

    # Set labels and title
    ax.set_xlabel('Z-score')
    ax.set_ylabel('Probability Density')
    ax.set_title('Z-distribution with p-value Area')



    # Add vertical lines representing the Z-score
    ax.axvline(Z, color='green', linestyle='--', label='Z-score')

    # Add legend
    ax.legend()

    plt.show()

    return decision



result = two_sample_proportions_test(para_ns_22.ID.count(),ns_22,para_ss_20.ID.count(),ss_20)
print(result)

"""##**5. Correlation**

###**2020**
"""

sci_cor = sci_features_20.corr()[['GPA of Natural Science']]
print(sci_cor)
plt.figure(figsize=(20,10))

sns.color_palette
sns.heatmap(sci_cor.T,annot = True, center=0.5, vmax=1,
            square=True, linewidths=0.5,cmap = 'Blues')

plt.title('Correlation with Science GPA')
plt.tight_layout()
plt.show()

soc_cor = soc_features_20.corr()[['GPA of Natural Social']]
print(soc_cor)
plt.figure(figsize=(20,10))

sns.color_palette
sns.heatmap(soc_cor.T,annot = True, center=0.5, vmax=1,
            square=True, linewidths=.5,cmap = 'Greens')

plt.title('Correlation with Social GPA')
plt.tight_layout()
plt.show()

"""###**2021**"""

sci_cor = sci_features_21.corr()[['GPA of Natural Science']]
print(sci_cor)
plt.figure(figsize=(20,10))

sns.color_palette
sns.heatmap(sci_cor.T,annot = True, center=0.5, vmax=1,
            square=True, linewidths=.5,cmap = 'Blues')

plt.title('Correlation with Science GPA')
plt.tight_layout()
plt.show()

soc_cor = soc_features_21.corr()[['GPA of Natural Social']]
print(soc_cor)

plt.figure(figsize=(20,10))

sns.color_palette
sns.heatmap(soc_cor.T,annot = True, center=0.5, vmax=1,
            square=True, linewidths=.5,cmap = 'Greens')

plt.title('Correlation with Social GPA')
plt.tight_layout()
plt.show()

"""###**2022**"""

sci_cor = sci_features_22.corr()[['GPA of Natural Science']]
print(sci_cor)
plt.figure(figsize=(20,10))

sns.color_palette
sns.heatmap(sci_cor.T,annot = True, center=0.5, vmax=1,
            square=True, linewidths=.5,cmap = 'Blues')

plt.title('Correlation with Science GPA')
plt.tight_layout()
plt.show()

soc_cor = soc_features_22.corr()[['GPA of Social Science']]
print(soc_cor)
plt.figure(figsize=(20,10))

sns.color_palette
sns.heatmap(soc_cor.T,annot = True, center=0.5, vmax=1,
            square=True, linewidths=.5,cmap = 'Greens')

plt.title('Correlation with Social GPA')
plt.tight_layout()
plt.show()



"""#Code cũ"""

score_20

vp = score_20[(score_20['Province/City']=="VĨNH PHÚC")]
nd = score_20[(score_20['Province/City']=="TPHCM")]

vp.describe()

nd.describe()

# Frequency of Natural Science and Natural Social
TN_20 = score_20["GPA of Natural Science"].count()
XH_20 = score_20["GPA of Natural Social"].count()
print(TN_20, XH_20)

score_20[score_20['Province/City']=='HỒ CHÍ MINH'][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social'].count() +score_20[score_20['Province/City']=='HỒ CHÍ MINH'][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
# hn['GPA of Natural Science'].count()

provinces = score_20['Province/City']
elements = ['BẮC GIANG', 'YÊN BÁI', 'ĐỒNG THÁP', 'AN GIANG', 'BÌNH DƯƠNG','QUẢNG NINH', 'ĐỒNG NAI', 'HÀ NỘI', 'CÀ MAU', 'BÀ RỊA – VŨNG TÀU','CẦN THƠ', 'LÀO CAI', 'ĐĂK NÔNG', 'THÁI NGUYÊN', 'HÀ NAM', 'HỒ CHÍ MINH', 'VĨNH LONG', 'NAM ĐỊNH', 'NINH THUẬN', 'ĐIỆN BIÊN','NGHỆ AN', 'HƯNG YÊN', 'TIỀN GIANG', 'BẠC LIÊU', 'QUẢNG NGÃI','TÂY NINH', 'BÌNH THUẬN', 'CAO BẰNG', 'NINH BÌNH', 'HÀ TĨNH']
unique_elements = []
for element in provinces:
    # Check if the element is already in the unique_elements list
    if element not in elements:
        # If the element is not in the unique_elements list, add it
        unique_elements.append(element)

# Print the result
print(provinces)

"""##2020"""

# Data cleaning steps (optional)
score_20['Province/City'] = score_20['Province/City'].str.strip().str.upper()

# Get the list of unique provinces without repetition
unique_provinces_20 = score_20['Province/City'].unique()

print(unique_provinces_20)

provinces = ['BẮC GIANG', 'YÊN BÁI', 'ĐỒNG THÁP', 'AN GIANG', 'BÌNH DƯƠNG', 'QUẢNG NINH',
             'ĐỒNG NAI', 'HÀ NỘI', 'CÀ MAU', 'BÀ RỊA – VŨNG TÀU', 'CẦN THƠ', 'LÀO CAI',
             'ĐĂK NÔNG', 'THÁI NGUYÊN', 'HÀ NAM', 'HỒ CHÍ MINH', 'VĨNH LONG', 'NAM ĐỊNH',
             'NINH THUẬN', 'ĐIỆN BIÊN', 'NGHỆ AN', 'HƯNG YÊN', 'TIỀN GIANG', 'BẠC LIÊU',
             'QUẢNG NGÃI', 'TÂY NINH', 'BÌNH THUẬN', 'CAO BẰNG', 'NINH BÌNH', 'HÀ TĨNH',
             'ĐẮK LẮK', 'HẢI PHÒNG', 'BẾN TRE', 'VĨNH PHÚC', 'HÒA BÌNH', 'QUẢNG BÌNH',
             'KIÊN GIANG', 'THỪA THIÊN - HUẾ', 'GIA LAI', 'SÓC TRĂNG', 'PHÚ THỌ',
             'BÌNH PHƯỚC', 'LONG AN', 'KHÁNH HÒA', 'LÂM ĐỒNG', 'QUẢNG NAM', 'KON TUM',
             'THANH HÓA', 'TRÀ VINH', 'BẮC NINH', 'BÌNH ĐỊNH', 'BẮC KẠN', 'LẠNG SƠN',
             'PHÚ YÊN', 'HẬU GIANG', 'THÁI BÌNH', 'SƠN LA', 'TUYÊN QUANG', 'QUẢNG TRỊ',
             'HÀ GIANG', 'HẢI DƯƠNG', 'LAI CHÂU']

excluded_provinces = ['ĐIỆN BIÊN', 'LAI CHÂU', 'SƠN LA', 'HÒA BÌNH', 'HÀ GIANG', 'CAO BẰNG',
                     'LÀO CAI', 'BẮC KẠN', 'LẠNG SƠN', 'TUYÊN QUANG', 'YÊN BÁI', 'THÁI NGUYÊN',
                     'PHÚ THỌ', 'BẮC GIANG', 'QUẢNG NINH', 'KON TUM', 'GIA LAI', 'ĐẮK LẮK',
                     'ĐẮK NÔNG', 'LÂM ĐỒNG']

filtered_provinces = np.array([province for province in provinces if province not in excluded_provinces])
print((filtered_provinces))

small = 0
large = 0
metqua = []
metia = []
metvl = []
metvc = []

for i in unique_provinces_20:
  gpa_nan = score_20[score_20['Province/City'] == i]['GPA of Natural Science']
  gpa2_nan = score_20[score_20['Province/City'] == i]['GPA of Natural Social']
  # remove nan
  gpa = gpa_nan.dropna()
  gpa2 = gpa2_nan.dropna()
  # count
  gpa_count = gpa.count()
  gpa2_count = gpa2.count()
  # calculate mean
  if gpa_count >= gpa2_count:
    small += 1
    natural1 = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science']
    social1 = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social']
    n1 = score_20[score_20['Province/City']==i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
    n2 = score_20[score_20['Province/City']==i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social'].count()
    metqua.append(n1)
    metia.append(n2)
    natural_tn = natural1.mean()
    social_tn = social1.mean()
  else:
    large +=1
    natural2 = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science']
    social2 = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social']
    n3 =  score_20[score_20['Province/City']==i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
    n4 = score_20[score_20['Province/City']==i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social'].count()
    metvl.append(n3)
    metvc.append(n4)
    natural_xh = natural2.mean()
    social_xh = social2.mean()
  # calculate var
# var_natural_tn = natural1.var()
# var_social_tn = social1.var()
# var_social_xh = social2.var()
# var_natural_xh = natural2.var()
print(sum(metqua), sum(metia), sum(metvl), sum(metvc))
# print(small, large)

# print("Mean Natural of Science > Social group:", natural_tn)
# print("Mean Social of Science > Social group:", social_tn)
# print("Mean Natural of Science < Social group:", natural_xh)
# print("Mean Social of Science < Social group:", social_xh)
# print(var_natural_tn)
# print(var_social_tn)
# print(var_natural_xh)
# print(var_social_xh)
# print("Variance of Science > Social group:", var_tn)
# print("Variance of Science < Social group:", var_xh)

"""##2021"""

# Data cleaning steps (optional)
score_21['Province/City'] = score_21['Province/City'].str.strip().str.upper()

# Get the list of unique provinces without repetition
unique_provinces_21 = score_21['Province/City'].unique()

print(unique_provinces_21)

small = 0
large = 0
metqua = []
metia = []
metvl = []
metvc = []

for i in unique_provinces_21:
  gpa_nan = score_21[score_21['Province/City'] == i]['GPA of Natural Science']
  gpa2_nan = score_21[score_21['Province/City'] == i]['GPA of Natural Social']
  # remove nan
  gpa = gpa_nan.dropna()
  gpa2 = gpa2_nan.dropna()
  # count
  gpa_count = gpa.count()
  gpa2_count = gpa2.count()
  # calculate mean
  if gpa_count >= gpa2_count:
    small += 1
    natural1 = score_21[score_21['Province/City'] == i][score_21['GPA of Natural Science'].notnull()]['GPA of Natural Science']
    social1 = score_21[score_21['Province/City'] == i][score_21['GPA of Natural Social'].notnull()]['GPA of Natural Social']
    n1 = score_21[score_21['Province/City']==i][score_21['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
    n2 = score_21[score_21['Province/City']==i][score_21['GPA of Natural Social'].notnull()]['GPA of Natural Social'].count()
    metqua.append(n1)
    metia.append(n2)
    natural_tn = natural1.mean()
    social_tn = social1.mean()
  else:
    large +=1
    natural2 = score_21[score_21['Province/City'] == i][score_21['GPA of Natural Science'].notnull()]['GPA of Natural Science']
    social2 = score_21[score_21['Province/City'] == i][score_21['GPA of Natural Social'].notnull()]['GPA of Natural Social']
    n3 =  score_21[score_21['Province/City']==i][score_21['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
    n4 = score_21[score_21['Province/City']==i][score_21['GPA of Natural Social'].notnull()]['GPA of Natural Social'].count()
    metvl.append(n3)
    metvc.append(n4)
    natural_xh = natural2.mean()
    social_xh = social2.mean()
  # calculate var
var_natural_tn = natural1.var()
var_social_tn = social1.var()
var_social_xh = social2.var()
var_natural_xh = natural2.var()
print(sum(metqua), sum(metia), sum(metvl), sum(metvc))
print(small, large)

print("Mean Natural of Science > Social group:", natural_tn)
print("Mean Social of Science > Social group:", social_tn)
print("Mean Natural of Science < Social group:", natural_xh)
print("Mean Social of Science < Social group:", social_xh)
print(var_natural_tn)
print(var_social_tn)
print(var_natural_xh)
print(var_social_xh)
# import math
# t = (natural_tn-natural_xh)/(math.sqrt((var_natural_tn/metqua)+(var_natural_xh/metvl)))

# print("Variance of Science > Social group:", var_tn)
# print("Variance of Science < Social group:", var_xh)

"""##2022"""

# Data cleaning steps (optional)
score_22['Province/City'] = score_22['Province/City'].str.strip().str.upper()

# Get the list of unique provinces without repetition
unique_provinces_22 = score_22['Province/City'].unique()

print(unique_provinces_22)

small = 0
large = 0
metqua = []
metia = []
metvl = []
metvc = []

for i in unique_provinces_22:
  gpa_nan = score_22[score_22['Province/City'] == i]['GPA of Natural Science']
  gpa2_nan = score_22[score_22['Province/City'] == i]['GPA of Social Science']
  # remove nan
  gpa = gpa_nan.dropna()
  gpa2 = gpa2_nan.dropna()
  # count
  gpa_count = gpa.count()
  gpa2_count = gpa2.count()
  # calculate mean
  if gpa_count >= gpa2_count:
    small += 1
    natural1 = score_22[score_22['Province/City'] == i][score_22['GPA of Natural Science'].notnull()]['GPA of Natural Science']
    social1 = score_22[score_22['Province/City'] == i][score_22['GPA of Social Science'].notnull()]['GPA of Social Science']
    n1 = score_22[score_22['Province/City']==i][score_22['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
    n2 = score_22[score_22['Province/City']==i][score_22['GPA of Social Science'].notnull()]['GPA of Social Science'].count()
    metqua.append(n1)
    metia.append(n2)
    natural_tn = natural1.mean()
    social_tn = social1.mean()
  else:
    large +=1
    natural2 = score_22[score_22['Province/City'] == i][score_22['GPA of Natural Science'].notnull()]['GPA of Natural Science']
    social2 = score_22[score_22['Province/City'] == i][score_22['GPA of Social Science'].notnull()]['GPA of Social Science']
    n3 =  score_22[score_22['Province/City']==i][score_22['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
    n4 = score_22[score_22['Province/City']==i][score_22['GPA of Social Science'].notnull()]['GPA of Social Science'].count()
    metvl.append(n3)
    metvc.append(n4)
    natural_xh = natural2.mean()
    social_xh = social2.mean()
  # calculate var
var_natural_tn = natural1.var()
var_social_tn = social1.var()
var_social_xh = social2.var()
var_natural_xh = natural2.var()
print(sum(metqua), sum(metia), sum(metvl), sum(metvc))
print(small, large)

print("Mean Natural of Science > Social group:", natural_tn)
print("Mean Social of Science > Social group:", social_tn)
print("Mean Natural of Science < Social group:", natural_xh)
print("Mean Social of Science < Social group:", social_xh)
print(var_natural_tn)
print(var_social_tn)
print(var_natural_xh)
print(var_social_xh)
# print("Variance of Science > Social group:", var_tn)
# print("Variance of Science < Social group:", var_xh)

"""##Rác"""

tn_means = []  # For 'GPA of Natural Science' group
xh_means = []  # For 'GPA of Natural Social' group

for i in unique_provinces:
    gpa_count = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
    gpa2_count = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social'].count()
    #score
    gpa = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science']
    gpa2 = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social']

    if gpa_count > gpa2_count:
        tn = gpa.mean()
        tn_means.append(tn)
    else:
        xh = gpa.mean()
        xh_means.append(xh)

# Calculate the mean of mean values for each group
mean_tn = sum(tn_means) / len(tn_means)
mean_xh = sum(xh_means) / len(xh_means)


print("Mean of 'GPA of Natural Science' group:", mean_tn)
print("Mean of 'GPA of Natural Social' group:", mean_xh)

tn_means = []  # For 'GPA of Natural Science' group
xh_means = []  # For 'GPA of Natural Social' group
tn_var = []
xh_var = []
for i in unique_provinces:
    gpa_count = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
    gpa2_count = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social'].count()

    gpa = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science']
    gpa2 = score_20[score_20['Province/City'] == i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social']

    if gpa_count > gpa2_count:
        tn = gpa.mean()
        tn_means.append(tn)
        tn_var.append(gpa)
    else:
        xh = gpa.mean()
        xh_means.append(xh)

# Calculate the mean of mean values for each group
mean_tn = sum(tn_means) / len(tn_means)
# mean_xh = sum(xh_means) / len(xh_means)
# VARIANCE
# var1 =

# Calculate the variance
# variance_gpa = ((tn_var - mean_tn) ** 2).sum() / len(tn_var)
# print(tn_var)
# print("Variance of GPA:", variance_gpa)
# var = np.var(tn)
# print(var)

# print("Mean of 'GPA of Natural Science' group:", mean_tn)
# print("Mean of 'GPA of Natural Social' group:", mean_xh)

#Tỉnh có thí sinh chọn tổ hợp Tự nhiên cao hơn xã hội (tn) và ngược lại (xh)
for i in unique_provinces:
  gpa_count = score_20[score_20['Province/City']==i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science'].count()
  gpa2_count = score_20[score_20['Province/City']==i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social'].count()
  gpa = score_20[score_20['Province/City']==i][score_20['GPA of Natural Science'].notnull()]['GPA of Natural Science']
  gpa2 = score_20[score_20['Province/City']==i][score_20['GPA of Natural Social'].notnull()]['GPA of Natural Social']
  if gpa_count>gpa2_count:
    tn = gpa.mean()
    print(i, tn)
  # else:
  #   xh = gpa.mean()
  #   # print(i, xh)
  #   # tính mean điểm của 2 sample
  #   tn_mean = tn.mean()
  #   xh_mean = xh.mean()
  #   print(tn_mean, xh_mean)

tn = [""]

hn[hn['GPA of Natural Science']>=1.08].count()



score_20["Natural Science"] = score_20[["Chemistry", "Physics", "Biological", "Math"]].notnull().any(axis=1)
natural_science_count = score_20[score_20["Natural Science"]]["Province/City"].value_counts()

# Create a histogram
plt.figure(figsize=(12, 6))
plt.bar(natural_science_count.index, natural_science_count.values)

# Set labels and title
plt.xlabel('Province/City')
plt.ylabel('Number of Students Choosing Natural Science')
plt.title('Number of Students Choosing Natural Science in Each Province/City')

# Rotate province names for better readability (optional)
plt.xticks(rotation=90)

# Display the plot
plt.tight_layout()
plt.show()

# Calculate value_counts() of 'GPA of Natural Science' for each province
gpa_counts = score_20.groupby('Province/City')['GPA of Natural Science'].value_counts()

# Extract the 'GPA of Natural Science' for each province
provinces = gpa_counts.index.get_level_values('Province/City')
gpa_values = gpa_counts.values

# Create a histogram
plt.figure(figsize=(12, 6))
plt.bar(provinces, gpa_values)

# Set labels and title
plt.xlabel('Province/City')
plt.ylabel('Number of Students with GPA of Natural Science')
plt.title('Number of Students with GPA of Natural Science in Each Province/City')

# Rotate province names for better readability (optional)
plt.xticks(rotation=90)

# Display the plot
plt.tight_layout()
plt.show()

# Top 10 provinces have highest score
# top = score_2020[(score_2021['Province/City']=="HÒA BÌNH") | (score_2021['Province/City']=="NAM ĐỊNH")]
tinh_top = ["BÌNH DƯƠNG", "NAM ĐỊNH", "NINH BÌNH", "AN GIANG", "VĨNH PHÚC", "HÀ NAM", "HẢI PHÒNG", "BẠC LIÊU", "CẦN THƠ", "TPHCM"]
top = score_20[score_20["Province/City"].isin(tinh_top)]
# Down 10 provinces have lowest score
tinh_bot = ["NINH THUẬN", "ĐIỆN BIÊN", "LẠNG SƠN" "QUẢNG NAM", "ĐẮK LẮK", "SƠN LA", "ĐẮK NÔNG", "CAO BẰNG", "HÒA BÌNH", "HÀ GIANG"]
bot = score_20[score_20["Province/City"].isin(tinh_bot)]



top.count()

bot.count()

top.describe()

bot.describe()

print(np.var(top['GPA of Natural Science']), np.var(bot['GPA of Natural Science']))

from statsmodels.stats.weightstats import ttest_ind
import numpy as np
#perform two sample t-test with equal variances
stats.ttest_ind(top['GPA of Natural Science'], bot['GPA of Natural Science'],equal_var=False)

score_21.tail()

# Frequency of Natural Science and Natural Social
TN_21 = score_21["GPA of Natural Science"].count()
XH_21 = score_21["GPA of Natural Social"].count()
print(TN_21, XH_21)

# Top 10 provinces have highest score
# top = score_2021[(score_2021['Province/City']=="HÒA BÌNH") | (score_2021['Province/City']=="NAM ĐỊNH")]
tinh_top = ["BÌNH DƯƠNG", "NAM ĐỊNH", "NINH BÌNH", "AN GIANG", "VĨNH PHÚC", "HÀ NAM", "BẠC LIÊU", "VĨNH LONG", "TPHCM", "PHÚ THỌ"]
top = score_21[score_21["Province/City"].isin(tinh_top)]
top
# Down 10 provinces have lowest score
tinh_bot = ["NINH THUẬN", "ĐIỆN BIÊN", "QUẢNG TRỊ", "ĐẮK LẮK", "PHÚ YÊN", "SƠN LA", "ĐẮK NÔNG", "CAO BẰNG", "HÒA BÌNH", "HÀ GIANG"]
bot = score_21[score_21["Province/City"].isin(tinh_bot)]
bot

top.count()

39250/(39250+68288)

bot.count()

16654/(16654+58354)

top.describe()

bot.describe()

# visualization
plt.hist(top["GPA of Natural Science"])

plt.hist(bot["GPA of Natural Science"])

score_22.head()

# Frequency of Natural Science and Natural Social
TN_22 = score_22["GPA of Natural Science"].count()
XH_22 = score_22["GPA of Social Science"].count()
print(TN_22, XH_22)

# Top 10 provinces have highest score
# top = score_2021[(score_2021['Province/City']=="HÒA BÌNH") | (score_2021['Province/City']=="NAM ĐỊNH")]
tinh_top = ["BÌNH DƯƠNG", "NAM ĐỊNH", "NINH BÌNH", "HẢI PHÒNG", "VĨNH PHÚC", "HÀ NAM", "BẮC NINH", "HÀ TĨNH", "THÁI BÌNH", "PHÚ THỌ"]
top = score_22[score_22["Province/City"].isin(tinh_top)]
# Down 10 provinces have lowest score
tinh_bot = ["NINH THUẬN", "TRÀ VINH", "LAI CHÂU", "ĐẮK LẮK", "PHÚ YÊN", "HÀ GIANG", "ĐẮK NÔNG", "CAO BẰNG", "HẬU GIANG", "BÌNH PHƯỚC"]
bot = score_22[score_22["Province/City"].isin(tinh_bot)]

top.describe()

bot.describe()

"""## **2017-2021**"""

score = pd.read_csv("/content/VIETNAM NATIONAL HIGHSCHOOL EXAM SCORE 2018.csv")
score.head()

score_17 = score[(score["Year"]==2019)]
score_17

score_17.count()



